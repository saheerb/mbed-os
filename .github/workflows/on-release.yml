name: on release

# The workflow is split into several sub jobs
# 1. prepare-tags: 
#    This step finds the latest mbed-os version (in terms of product version not date)
#    and generates a unique dev version for the image. 
#    The DEV docker tag takes the format of dev-<MBED_OS_VERSION>-<human readable date>-<UUID>
# 2. build-container:
#    The dev version of image is built here and pushed to docker hub.
#    When multiarch image is built docker buildx doesn't support exporting to docker
#    Hence, need to push to a registry (dockerhub).
# 3. test-container:
#    This tests the dev docker images
# 4. deploy-container
#    At this point, docker image marked as "dev" is ready to tag as "prod"
#    Also, deletes the dev tag
#    The dev images that didn't succeed is kept in docker hub for troubleshooting purposes.
#    Published docker tags are:
#    1. <MBED_OS_VERSION>-latest
#    2. <MBED_OS_VERSION>-<human readable date>
#    3. latest
#    This can be move with another workflow

on:
  schedule:
    - cron:  '15 4 * * *'
    
  push:
    # on push master build a new image master-latest for example application
    # on push 5.15 build a new image 5.15-latest for example application
    # on release 5.15 build a new image 5.15-stable for example application
    # on manul 
    # at night ??
    tags:
      - '*'
    # paths:
    #   - docker_images/mbed-os-env/**
    #   - .github/workflows/**

  workflow_dispatch:

jobs:
  prepare-tags:
    runs-on: ubuntu-latest

    steps:
      - 
        name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      -
        name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - 
        name: Find the latest tag on the branch
        id: mbed_os_version
        shell: bash
        run: |
          value=`git describe --tags --abbrev=0  --match mbed-os-*.[0-9]`
          echo "TAG is $value"
          echo "::set-output name=tag::$value"

      - 
        name: Set UUID
        id: generate-uuid
        uses: filipstefansson/uuid-action@v1

# set docker tags we are building, and intending to publish
# dev-tag is temporary for testing purpose. This should be considered as unstable.
# dated-tag is created for versioning purpose
# prod-tag-latest could be used by customers, CI etc for keeping up to date
      - 
        name: Get build information
        shell: bash
        run: |
          mkdir -p build_info
          date=$(date +"%Y.%m.%dT%H.%M.%S")
          echo dev-${{ steps.extract_branch.outputs.branch }}-${date}-${{ steps.generate-uuid.outputs.uuid }} > build_info/dev_tag
          echo ${{ steps.extract_branch.outputs.branch }}-${date} > build_info/prod_tag_dated
          echo ${{ steps.extract_branch.outputs.branch }}-latest > build_info/prod_tag_latest
          echo ${{ steps.extract_branch.outputs.branch }} > build_info/mbed_os_version
          # echo dev-${{ steps.mbed_os_version.outputs.tag }}-${date}-${{ steps.generate-uuid.outputs.uuid }} > build_info/dev_tag
          # echo ${{ steps.mbed_os_version.outputs.tag }}-${date} > build_info/prod_tag_dated
          # echo ${{ steps.mbed_os_version.outputs.tag }}-latest > build_info/prod_tag_latest
          # echo ${{ steps.mbed_os_version.outputs.tag }} > build_info/mbed_os_version

      # archiving and unarchiving are github actions ways to pass variables between jobs    
      - 
        name: Archive information 
        uses: actions/upload-artifact@v2
        with:
          name: build-info
          path: build_info
          