name: Release or update docker image for a released mbed-os version

# The workflow is split into several sub jobs
# 1. prepare-tags: 
#    This step finds the latest mbed-os version (in terms of product version not date)
#    and generates a unique dev version for the image. 
#    The DEV docker tag takes the format of dev-<MBED_OS_VERSION>-<human readable date>-<UUID>
# 2. build-container:
#    The dev version of image is built here and pushed to docker hub.
#    When multiarch image is built docker buildx doesn't support exporting to docker
#    Hence, need to push to a registry (dockerhub).
# 3. test-container:
#    This tests the dev docker images
# 4. deploy-container
#    At this point, docker image marked as "dev" is ready to tag as "prod"
#    Also, deletes the dev tag
#    The dev images that didn't succeed is kept in docker hub for troubleshooting purposes.
#    Published docker tags are:
#    1. <MBED_OS_VERSION>-latest
#    2. <MBED_OS_VERSION>-<human readable date>
#    3. latest
#    This can be move with another workflow


# TODO: Handle cache when new build is made. Currently when mbed-os-6.11.15 is made cache is also set to mbed-os-6.11.15
# this is slow and creates a new image. Need to set to master-latest when new tag is created and to mbed-os-6.11.15
# when tag already exists
# cannot combine with on push on branch as on tags needs to be executed without path exclusion
on:    
  push:
    tags: 
      - mbed-os-6.[0-9]+.[0-9]+
      - mbed-os-5.[0-9]+.[0-9]+

  schedule:
    - cron:  '15 4 * * *'

  workflow_dispatch:
    inputs:
      mbed_os_release_version:
        description: 'mbed-os release version for which you want to update docker image.'
        required: true

jobs:
  prepare-tags:
    if: github.repository_owner == 'saheerb'
    runs-on: ubuntu-latest

    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - 
        if: ${{ github.event_name == 'workflow_dispatch' }}
        name: Sanity check tag of manual trigger
        shell: bash
        run: | 
          if [ -z $(git tag --merged ${GITHUB_REF} ${{ github.event.inputs.mbed_os_release_version }}) ]; then
            echo "Check the tag name ${{ github.event.inputs.mbed_os_release_version }} is not found on branch ${GITHUB_REF}"
            exit 1
          fi

      - 
        name: Set UUID
        id: generate-uuid
        uses: filipstefansson/uuid-action@v1

# set docker tags we are building, and intending to publish
# dev-tag is temporary for testing purpose. This should be considered as unstable.
# dated-tag is created for versioning purpose
# prod-tag-latest could be used by customers, CI etc for keeping up to date
      - 
        name: Get build information
        shell: bash
        run: |
          mkdir -p build_info
          date=$(date +"%Y.%m.%dT%H.%M.%S")
          if [ "push" == "${{github.event_name}}" ];then
            version=${GITHUB_REF#refs/tags/}
            # TODO: Find method to find the branch properly
            cache_source="master-latest"
          elif [ "workflow_dispatch" == "${{github.event_name}}" ];then
            version=${{ github.event.inputs.mbed_os_release_version }}
            cache_source=${version}-latest
          else
            version=`git describe --tags --abbrev=0  --match mbed-os-[0-9]*.[0-9]*.[0-9]*`
            cache_source=${version}-latest
          fi
          echo dev-${version}-${date}-${version} > build_info/dev_tag
          echo ${version}-${date} > build_info/prod_tag_dated
          echo ${version} > build_info/mbed_os_version
          echo ${cache_source} > build_info/cache_source

      # archiving and unarchiving are github actions ways to pass variables between jobs    
      - 
        name: Archive information 
        uses: actions/upload-artifact@v2
        with:
          name: build-info
          path: build_info
          

  build-container:
    runs-on: ubuntu-latest
    needs: prepare-tags
    outputs:
      DEV_DIGEST: ${{ steps.docker_info_dev.outputs.DIGEST }}
      PROD_DIGEST: ${{ steps.docker_info_prod.outputs.DIGEST }}

    steps:
      - 
        name: unarchive artefacts
        uses: actions/download-artifact@v2
        with:
          name: build-info
          
      - 
        name: Get build info from archive
        shell: bash
        id: build_info
        run: |
          value=`cat dev_tag`
          echo "TAG is $value"
          echo "::set-output name=DOCKER_DEV_TAG::$value"
          value=`cat prod_tag_dated`
          echo "TAG is $value"
          echo "::set-output name=DOCKER_PROD_TAG_DATED::$value"
          value=`cat mbed_os_version`
          echo "::set-output name=MBED_OS_VERSION::$value"
          value=`cat cache_source`
          echo "::set-output name=CACHE_SOURCE::$value"

      - 
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - 
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - 
        name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      -
        name: Checkout
        uses: actions/checkout@v2
        with:
          ref: refs/tags/${{ steps.build_info.outputs.MBED_OS_VERSION }}

      -
        name: Build with remote cache
        uses: docker/build-push-action@v2
        id: docker_build_dev
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          # load: true - not supported for multi arch
          push: true
          file: ./docker_images/mbed-os-env/Dockerfile
          tags: ghcr.io/${{ github.actor }}/mbed-os-env-tmp:${{ steps.build_info.outputs.DOCKER_DEV_TAG }}
          cache-from: type=registry,ref=ghcr.io/${{ github.actor }}/mbed-os-env:${{ steps.build_info.outputs.CACHE_SOURCE }}
          cache-to: type=inline

      -
        name: Find DOCKER DIGEST trying to publish (if exists in docker repository)
        id: docker_info_prod
        run: |
          DIGEST=$(docker run quay.io/skopeo/stable --creds=${{ github.actor }}:${{ secrets.GITHUB_TOKEN }} inspect docker://ghcr.io/${{ github.actor }}/mbed-os-env:${{ steps.build_info.outputs.CACHE_SOURCE }} | jq ".Digest")
          echo "::set-output name=DIGEST::$DIGEST"
          echo "Docker DIGEST: $DIGEST"

      - 
        name: Find DEV DOCKER DIGEST
        id: docker_info_dev
        run: |
          DIGEST=$(docker run quay.io/skopeo/stable --creds=${{ github.actor }}:${{ secrets.GITHUB_TOKEN }} inspect docker://ghcr.io/${{ github.actor }}/mbed-os-env-tmp:${{ steps.build_info.outputs.DOCKER_DEV_TAG }} | jq ".Digest")
          echo "Docker DIGEST: $DIGEST"
          echo "::set-output name=DIGEST::$DIGEST"
          echo "Docker DIGEST: $DIGEST"

  test-container:
    runs-on: ubuntu-latest
    needs: build-container
    # no need to test (nor publish) if we already have the same image in dockerhub
    if: needs.build-container.outputs.DEV_DIGEST != needs.build-container.outputs.PROD_DIGEST
    outputs:
      STATUS: ${{ steps.test.outputs.STATUS }}
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
        # platform: [linux/amd64]
        
    steps:
      - 
        name: unarchive artefacts
        uses: actions/download-artifact@v2
        with:
          name: build-info
          
      - 
        name: Get build info from archive
        shell: bash
        id: build_info
        run: |
          value=`cat dev_tag`
          echo "TAG is $value"
          echo "::set-output name=DOCKER_DEV_TAG::$value"
          value=`cat prod_tag_dated`
          echo "TAG is $value"
          echo "::set-output name=DOCKER_PROD_TAG_DATED::$value"
          value=`cat mbed_os_version`
          echo "::set-output name=MBED_OS_VERSION::$value"

      - 
        name: Checkout
        uses: actions/checkout@v2
        with:
          ref: refs/tags/${{ steps.build_info.outputs.MBED_OS_VERSION }}

      - 
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - 
        name: test the container
        id: test
        uses: addnab/docker-run-action@v3
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io
          options: -v ${{ github.workspace }}:/work -w=/work
          image: ghcr.io/${{ github.actor }}/mbed-os-env-tmp@${{ steps.docker_info_dev.outputs.DIGEST }}
          shell: bash
          run: |
            set -e
            echo "::set-output name=STATUS::failed"
            uname -m
            ./docker_images/mbed-os-env/test.sh ${{ steps.build_info.outputs.MBED_OS_VERSION }}
            echo "::set-output name=STATUS::passed"
            
      
  deploy-container:
    runs-on: ubuntu-latest
    needs: test-container
    if:  ${{ always() }}
        
    steps:

      - 
        name: unarchive artefacts
        uses: actions/download-artifact@v2
        with:
          name: build-info
        
      - 
        name: Get build info from archive
        shell: bash
        id: build_info
        run: |
          value=`cat dev_tag`
          echo "DEV TAG is $value"
          echo "::set-output name=DOCKER_DEV_TAG::$value"
          value=`cat prod_tag_dated`
          echo "DATED PROD TAG is $value"
          echo "::set-output name=DOCKER_PROD_TAG_DATED::$value"
          value=`cat mbed_os_version`
          echo "MBED OS VERSION is $value"
          echo "::set-output name=MBED_OS_VERSION::$value"

      -
        name: Checkout
        uses: actions/checkout@v2
        with:
          ref: refs/tags/${{ steps.build_info.outputs.MBED_OS_VERSION }}

      # even if tests skipped (as cache was used as source retag)
      - 
        if: needs.test-container.result=='skipped' || needs.test-container.outputs.STATUS == 'passed'
        name: copy dev tag to prod
        run: |
          set -x
          echo ${{ needs.test-container.result }}
          upto_patch_version=${{ steps.build_info.outputs.MBED_OS_VERSION }}-latest
          upto_min_version=${upto_patch_version%.[0-9]*}-latest
          upto_major_version=${upto_patch_version%.[0-9]*.[0-9]*}-latest
          docker run quay.io/skopeo/stable --src-creds=${{ github.actor }}:${{ secrets.GITHUB_TOKEN }} --dest-creds=${{ github.actor }}:${{ secrets.GITHUB_TOKEN }} copy --all docker://ghcr.io/${{ github.actor }}/mbed-os-env-tmp:${{ steps.build_info.outputs.DOCKER_DEV_TAG }}  docker://ghcr.io/${{ github.actor }}/mbed-os-env:${upto_patch_version}
          docker run quay.io/skopeo/stable --src-creds=${{ github.actor }}:${{ secrets.GITHUB_TOKEN }} --dest-creds=${{ github.actor }}:${{ secrets.GITHUB_TOKEN }} copy --all docker://ghcr.io/${{ github.actor }}/mbed-os-env-tmp:${{ steps.build_info.outputs.DOCKER_DEV_TAG }}  docker://ghcr.io/${{ github.actor }}/mbed-os-env:${upto_min_version}
          # if not manually triggered
          docker run quay.io/skopeo/stable --src-creds=${{ github.actor }}:${{ secrets.GITHUB_TOKEN }} --dest-creds=${{ github.actor }}:${{ secrets.GITHUB_TOKEN }} copy --all docker://ghcr.io/${{ github.actor }}/mbed-os-env-tmp:${{ steps.build_info.outputs.DOCKER_DEV_TAG }}  docker://ghcr.io/${{ github.actor }}/mbed-os-env:${upto_major_version}

      - 
        if: needs.test-container.outputs.STATUS == 'passed'
        name: copy dev tag to prod dated tag
        run: |
          docker run quay.io/skopeo/stable --src-creds=${{ github.actor }}:${{ secrets.GITHUB_TOKEN }} --dest-creds=${{ github.actor }}:${{ secrets.GITHUB_TOKEN }} copy --all docker://ghcr.io/${{ github.actor }}/mbed-os-env-tmp:${{ steps.build_info.outputs.DOCKER_DEV_TAG }}  docker://ghcr.io/${{ github.actor }}/mbed-os-env:${{ steps.build_info.outputs.DOCKER_PROD_TAG_DATED }}


      - if: needs.test-container.outputs.STATUS == 'failed'
        name: Rename Dev Tag
        run: |
          docker run quay.io/skopeo/stable --src-creds=${{ github.actor }}:${{ secrets.GITHUB_TOKEN }} --dest-creds=${{ github.actor }}:${{ secrets.GITHUB_TOKEN }} copy --all docker://ghcr.io/${{ github.actor }}/mbed-os-env-tmp:${{ steps.build_info.outputs.DOCKER_DEV_TAG }}  docker://ghcr.io/${{ github.actor }}/mbed-os-env-tmp:failed-${{ steps.build_info.outputs.DOCKER_DEV_TAG }}

      - 
        name: Delete old temporary images
        run: |
          python ./.github/workflows/ci_scripts/github_utils.py -u ${{ github.actor }} -p ${{ secrets.ANOTHER_GITHUB_TOKEN }} delete-old-images -r mbed-os-env-tmp
          