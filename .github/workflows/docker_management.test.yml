name: Publish or Update docker image for head of branch
# TODO: add documentation link


on:

  schedule:
    - cron:  '15 4 * * *'

  push:
    branches: 
      - master

    paths:
      - requirements.txt
      - docker_images/mbed-os-env/**
      - .github/workflows/docker_management.test.yml


  workflow_dispatch: 


jobs:
  prepare-tags:
    # condition on environmental variable doesn't work at job level
    if: github.repository_owner == 'saheerb'

    runs-on: ubuntu-latest

    steps:
      - 
        if: ${{ github.repository_owner == env.repo-owner }}
        name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      # -
      #   name: Checkout
      #   uses: actions/checkout@v2
      #   with:
      #     fetch-depth: 0

      - 
        name: Set UUID
        id: generate-uuid
        uses: filipstefansson/uuid-action@v1

# set docker tags we are building, and intending to publish
# dev-tag is temporary for testing purpose. This should be considered as unstable.
# dated-tag is created for versioning purpose
# prod-tag-latest could be used by customers, CI etc for keeping up to date
      - 
        name: Get build information
        shell: bash
        run: |
          mkdir -p build_info
          date=$(date +"%Y.%m.%dT%H.%M.%S")
          echo dev-${{ steps.extract_branch.outputs.branch }}-${date}-${{ steps.generate-uuid.outputs.uuid }} > build_info/dev_tag
          echo ${{ steps.extract_branch.outputs.branch }}-${date} > build_info/prod_tag_dated
          echo ${{ steps.extract_branch.outputs.branch }}-latest > build_info/prod_tag_latest
          echo ${{ steps.extract_branch.outputs.branch }} > build_info/mbed_os_version
          
      # archiving and unarchiving are github actions ways to pass variables between jobs    
      - 
        name: Archive information 
        uses: actions/upload-artifact@v2
        with:
          name: build-info
          path: build_info
          


  build-container:
    runs-on: ubuntu-latest
    needs: prepare-tags
    outputs:
      DEV_DIGEST: ${{ steps.docker_info_dev.outputs.DIGEST }}
      PROD_DIGEST: ${{ steps.docker_info_prod.outputs.DIGEST }}

    steps:
      - 
        name: unarchive artefacts
        uses: actions/download-artifact@v2
        with:
          name: build-info
          
      - 
        name: Get build info from archive
        shell: bash
        id: build_info
        run: |
          value=`cat dev_tag`
          echo "DEV TAG is $value"
          echo "::set-output name=DOCKER_DEV_TAG::$value"
          value=`cat prod_tag_dated`
          echo "PROD TAG DATED is $value"
          echo "::set-output name=DOCKER_PROD_TAG_DATED::$value"
          value=`cat prod_tag_latest`
          echo "::set-output name=DOCKER_PROD_TAG_LATEST::$value"
          echo "PROD TAG is $value"
      -
        name: Find DOCKER DIGEST trying to publish (if exists in docker repository)
        id: docker_info_prod
        run: |
          echo "::set-output name=DIGEST::1"

      - 
        name: Find DEV DOCKER DIGEST
        id: docker_info_dev
        run: |
          echo "::set-output name=DIGEST::3"

  test-container:
    runs-on: ubuntu-latest
    needs: build-container
    # no need to test (nor publish) if we already have the same image in dockerhub
    if: needs.build-container.outputs.DEV_DIGEST != needs.build-container.outputs.PROD_DIGEST
    outputs:
      STATUS: ${{ steps.test.outputs.STATUS }}
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
        # platform: [linux/amd64]
        
    steps:
      - 
        name: unarchive artefacts
        uses: actions/download-artifact@v2
        with:
          name: build-info
          
      - 
        name: Get build info from archive
        shell: bash
        id: build_info
        run: |
          value=`cat dev_tag`
          echo "TAG is $value"
          echo "::set-output name=DOCKER_DEV_TAG::$value"
          value=`cat prod_tag_dated`
          echo "TAG is $value"
          echo "::set-output name=DOCKER_PROD_TAG_DATED::$value"
          value=`cat prod_tag_latest`
          echo "::set-output name=DOCKER_PROD_TAG_LATEST::$value"
          value=`cat mbed_os_version`
          echo "::set-output name=MBED_OS_VERSION::$value"

      # - 
      #   name: Checkout
      #   uses: actions/checkout@v2

      # - 
      #   name: Set up QEMU
      #   uses: docker/setup-qemu-action@v1

      - 
        name: Get build info from archive
        shell: bash
        id: test
        run: |
          echo "::set-output name=STATUS::failed"
          ls
          exit 1
          echo "::set-output name=STATUS::passed"
      
  deploy-container:
    env: 
      repo-owner: saheerb1
    runs-on: ubuntu-latest
    needs: test-container
    if: ${{ always() }}
    steps:
      - 
        if: ${{ github.repository_owner == env.repo-owner }}
        name: unarchive artefacts
        uses: actions/download-artifact@v2
        with:
          name: build-info
        
      - 
        if: ${{ github.repository_owner == env.repo-owner }}
        name: Get build info from archive
        shell: bash
        id: build_info
        run: |
          value=`cat dev_tag`
          echo "TAG is $value"
          echo "::set-output name=DOCKER_DEV_TAG::$value"
          value=`cat prod_tag_dated`
          echo "TAG is $value"
          echo "::set-output name=DOCKER_PROD_TAG_DATED::$value"
          value=`cat prod_tag_latest`
          echo "::set-output name=DOCKER_PROD_TAG_LATEST::$value"
          
      - 
        if: ${{ github.repository_owner == env.repo-owner && needs.test-container.outputs.STATUS == 'passed' }}
        name: copy dev tag to prod
        run: |
          echo "passed"
          
      - if: ${{ github.repository_owner == env.repo-owner  && needs.test-container.result=='skipped' }}
        name: Skipped
        run: |
          echo "skipped"

      - if: github.repository_owner == env.repo-owner && needs.test-container.outputs.STATUS == 'failed'
        name: failed
        run: |
          echo "failed"
          